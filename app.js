// Generated by CoffeeScript 2.0.0-beta8-dev
void function () {
  var app, BasicStrategy, conf, Config, cors, ECT, ectRenderer, ensureAuthenticated, express, getAllVotesForStreamId, grid, http, i18n, languages, models, moment, mongoose, passport, path, port, processRandom, random, rangedRandom, redis, RedisStore, routes, staticDomain, vp, waiter;
  require('iced-coffee-script');
  path = require('path');
  http = require('http');
  redis = require('redis');
  express = require('express');
  RedisStore = require('connect-redis')(express);
  vp = redis.createClient();
  vp.select(1);
  i18n = require('i18n');
  mongoose = require('mongoose');
  passport = require('passport');
  BasicStrategy = require('passport-http').BasicStrategy;
  express['static'].mime.define({ 'application/x-chrome-extension': ['crx'] });
  moment = require('moment');
  models = require('./models');
  routes = require('./routes');
  Config = require('./conf');
  conf = new Config;
  ECT = require('ect');
  ectRenderer = ECT({
    watch: true,
    root: __dirname + '/views'
  });
  grid = module.exports = { models: models };
  app = module.exports.app = express();
  passport.use(new BasicStrategy(function (username, password, done) {
    return models.User.findOne({ username: username }, 'username password email role', function (err, user) {
      if (err)
        return done(err);
      if (!user)
        return done(null, false);
      if (!user.validPassword(password))
        return done(null, false);
      return done(null, user);
    });
  }));
  passport.serializeUser(function (user, done) {
    return done(null, user.id);
  });
  passport.deserializeUser(function (id, done) {
    console.log(id);
    return models.User.findById(id, function (err, user) {
      return done(err, user);
    });
  });
  cors = function (req, res, next) {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');
    res.header('Access-Control-Allow-Headers', 'Content-Type,X-Requested-With');
    return next();
  };
  random = function () {
    var func;
    func = arguments[Math.floor(Math.random() * arguments.length)];
    if (typeof func === 'function')
      return func.call();
  };
  processRandom = function (req, res, next) {
    var fail, forbidden;
    if (!(req.method === 'GET')) {
      fail = function () {
        return res.send(500);
      };
      forbidden = function () {
        return res.send(401);
      };
      return random(next, fail, forbidden);
    } else {
      return next();
    }
  };
  rangedRandom = function (min, max) {
    if (null == min)
      min = 0;
    if (null == max)
      max = 255;
    return Math.floor(Math.random() * (max - min + 1)) + min;
  };
  waiter = function (req, res, next) {
    if ((null != req.query ? req.query.start : void 0) && (null != req.query ? req.query.end : void 0)) {
      return setTimeout(next, rangedRandom(parseInt(req.query.start), parseInt(req.query.end)));
    } else {
      return setTimeout(next, rangedRandom(500, 3e3));
    }
  };
  languages = [
    'ru',
    'en',
    'de',
    'it'
  ];
  i18n.configure({
    locales: languages,
    defaultLocale: 'en',
    cookie: 'lang'
  });
  app.configure(function () {
    app.set('port', process.env.PORT || 3e3);
    app.set('views', '' + __dirname + '/views');
    app.engine('.ect', ectRenderer.render);
    app.use(express['static'](path.join(__dirname, 'public')));
    app.use('/test', express['static'](path.join(__dirname, 'test')));
    app.use(express.cookieParser());
    app.use(express.bodyParser());
    app.use(express.methodOverride());
    console.log('Redis', conf._redis);
    app.use(express.session({
      secret: 'Is it secure?',
      store: new RedisStore({
        host: conf._redis.host,
        port: conf._redis.port,
        pass: conf._redis.password,
        db: conf._redis.db
      })
    }));
    app.use(passport.initialize());
    app.use(passport.session());
    app.use(i18n.init);
    app.use(function (req, res, next) {
      app.locals.user = req.user;
      res.locals.language = req.language;
      if (req.language && in$(req.language, languages))
        moment.lang(req.language);
      res.locals.__ = res.__ = function () {
        return i18n.__.apply(req, arguments);
      };
      res.locals.__n = res.__n = function () {
        return i18n.__n.apply(req, arguments);
      };
      return next();
    });
    return app.use(cors);
  });
  app.configure('development', function () {
    mongoose.set('debug', true);
    app.use(express.logger('dev'));
    return app.use(express.errorHandler({
      dumpExceptions: true,
      showStack: true
    }));
  });
  app.configure('production', function () {
    var oneYear;
    app.use(express.compress());
    app.use(express.errorHandler());
    oneYear = 315576e5;
    return app.use(express['static'](path.join(__dirname, 'public'), { maxAge: oneYear }));
  });
  port = 80;
  if (conf.port)
    port = conf.port;
  if (port === 80) {
    staticDomain = '//' + conf.hostname;
  } else {
    staticDomain = '//' + conf.hostname + ':' + port;
  }
  app.locals({
    node_env: process.env.NODE_ENV,
    staticDomain: '',
    moment: moment,
    __: function () {
      return i18n.__(arguments);
    },
    languages: languages
  });
  app.options('*', function (req, res) {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS');
    res.header('Access-Control-Allow-Headers', 'accept, origin, content-type, referer, cache-control, pragma, user-agent, X-Requested-With');
    res.header('Access-Control-Max-Age', 1728e3);
    res.header('Content-Length', 0);
    return res.send(204);
  });
  app.get('/api/?', routes.api.index);
  app.post('/api/logs', routes.api.logs.create);
  app.get('/api/countries', routes.api.countries.list);
  app.get('/api/countries/names', routes.api.countries.namesList);
  app.get('/api/countries/:_id', routes.api.countries.item);
  app.post('/hidden/countries', routes.hidden.countries.create);
  app.get('/api/games', routes.api.games.list);
  app.get('/api/games/:_id', routes.api.games.item);
  app.put('/api/games/:_id', routes.api.games.update);
  app.post('/api/games', routes.api.games.create);
  app['delete']('/api/games/:_id', routes.api.games['delete']);
  app.post('/hidden/games', routes.api.games.create);
  app.get('/api/matches', routes.api.matches.list);
  app.get('/api/matches/:_id', routes.api.matches.item);
  app.post('/api/matches', routes.api.matches.create);
  app.put('/api/matches', routes.api.matches.update);
  app.put('/api/matches/:_id', routes.api.matches.update);
  app['delete']('/api/matches/:_id', routes.api.matches['delete']);
  app.post('/hidden/matches', routes.api.matches.create);
  app['delete']('/hidden/matches/:_id', routes.api.matches['delete']);
  app.get('/api/players', routes.api.players.list);
  app.get('/api/players/:_id', routes.api.players.item);
  app.post('/api/players', routes.api.players.create);
  app.put('/api/players', routes.api.players.update);
  app.put('/api/players/:_id', routes.api.players.update);
  app.post('/hidden/players', routes.api.players.create);
  app.get('/api/reports', routes.api.reports.list);
  app.get('/api/reports/:_id', routes.api.reports.item);
  app.post('/hidden/reports', routes.hidden.reports.create);
  app.put('/hidden/reports/:_id', routes.hidden.reports.update);
  app['delete']('/hidden/reports/:_id', routes.hidden.reports['delete']);
  app.get('/api/result_sets', routes.api.resultSets.list);
  app.get('/api/result_sets/:_id', routes.api.resultSets.item);
  app.post('/api/result_sets', routes.api.resultSets.create);
  app.put('/api/result_sets/:_id', routes.api.resultSets.update);
  app['delete']('/api/result_sets/:_id', routes.api.resultSets['delete']);
  app.post('/hidden/result_sets', routes.api.resultSets.create);
  app.get('/api/results', routes.api.results.list);
  app.get('/api/results/:_id', routes.api.results.item);
  app.post('/api/results', routes.api.results.create);
  app.put('/api/results/:_id', routes.api.results.update);
  app['delete']('/api/results/:_id', routes.api.results['delete']);
  app.get('/api/rounds', routes.api.rounds.list);
  app.get('/api/rounds/:_id', routes.api.rounds.item);
  app.post('/api/rounds', routes.api.rounds.create);
  app.put('/api/rounds/:_id', routes.api.rounds.update);
  app['delete']('/api/rounds/:_id', routes.api.rounds['delete']);
  app.post('/hidden/rounds', routes.api.rounds.create);
  app.get('/api/brackets', routes.api.brackets.list);
  app.get('/api/brackets/:_id', routes.api.brackets.item);
  app.post('/api/brackets', routes.api.brackets.create);
  app.put('/api/brackets/:_id', routes.api.brackets.update);
  app['delete']('/api/brackets/:_id', routes.api.brackets['delete']);
  app.post('/hidden/brackets', routes.api.brackets.create);
  app.get('/api/stages', routes.api.stages.list);
  app.get('/api/stages/:_id', routes.api.stages.item);
  app.post('/api/stages', routes.api.stages.create);
  app.put('/api/stages/:_id', routes.api.stages.update);
  app['delete']('/api/stages/:_id', routes.api.stages['delete']);
  app['delete']('/api/stages/bulk', routes.api.stages['delete']);
  app.post('/hidden/stages', routes.api.stages.create);
  app.get('/api/teams', routes.api.teams.list);
  app.post('/api/teams', routes.api.teams.create);
  app.get('/api/teams/:_id', routes.api.teams.item);
  app.put('/api/teams/:_id', routes.api.teams.update);
  app['delete']('/api/teams/:_id', routes.api.teams['delete']);
  app['delete']('/api/teams/bulk', routes.api.teams['delete']);
  app.post('/hidden/teams', routes.api.teams.create);
  app.get('/api/team_refs', routes.api.team_refs.list);
  app.post('/api/team_refs', routes.api.team_refs.create);
  app.get('/api/team_refs/:_id', routes.api.team_refs.item);
  app.put('/api/team_refs/:_id', routes.api.team_refs.update);
  app['delete']('/api/team_refs/:_id', routes.api.team_refs['delete']);
  app['delete']('/api/team_refs/bulk', routes.api.team_refs['delete']);
  app.post('/hidden/team_refs', routes.api.team_refs.create);
  ensureAuthenticated = function (req, res, next) {
    if (req.isAuthenticated())
      return next();
    return res.redirect('/');
  };
  app.get('/', passport.authenticate('basic'), function (req, res) {
    console.log(req.user);
    if ((null != req.user ? req.user.language : void 0) && !(null != req.cookies ? req.cookies.lang : void 0))
      res.cookie('lang', req.user.language);
    return res.redirect('/reports');
  });
  app.get('/unauthorized', function (req, res) {
    res.statusCode = 401;
    return res.render('unauthorized.ect');
  });
  app.get('/logout', function (req, res) {
    req.logout();
    app.locals.user = null;
    res.statusCode = 401;
    return res.render('logged_out.ect');
  });
  app.get('/logs', ensureAuthenticated, routes.logs.list);
  app.get('/logs/:_id', ensureAuthenticated, routes.logs.item);
  app.get('/authors', ensureAuthenticated, routes.authors.list);
  app.get('/authors/:_id', ensureAuthenticated, routes.authors.item);
  app.get('/reports', ensureAuthenticated, routes.reports.list);
  app.get('/reports/create', ensureAuthenticated, routes.reports.createForm);
  app.post('/reports/create', ensureAuthenticated, routes.reports.create);
  app.get('/reports/:_id', ensureAuthenticated, routes.reports.item);
  app.get('/matches/:_id', ensureAuthenticated, routes.matches.item);
  app.get('/games/:_id', ensureAuthenticated, routes.games.item);
  app.get('/teams/:_id', ensureAuthenticated, routes.teams.item);
  app.get('/players/:_id', ensureAuthenticated, routes.players.item);
  app.get('/voting', ensureAuthenticated, routes.voting.index);
  getAllVotesForStreamId = function (streamId, cb) {
    return vp.get('vp:voting:' + streamId, function (err, votingJSON) {
      var voting;
      voting = JSON.parse(votingJSON);
      return vp.hgetall('vp:voting:' + streamId + ':results', function (err, results) {
        var count, index;
        console.log(err, results);
        if (!err) {
          for (index in results) {
            count = results[index];
            voting.variants[index].count = parseInt(count);
          }
          voting.voted = true;
          return cb(voting);
        } else {
          return cb({ error: err });
        }
      });
    });
  };
  app.get('/vote.php', function (req, res) {
    console.log('req.query', req.query);
    if (req.query)
      return vp.get('vp:voting:' + req.query.streamId, function (err, votingJSON) {
        var voting;
        console.log(err, votingJSON);
        if (err)
          return res.send({ error: err });
        if (!votingJSON) {
          console.log(req.user);
          if (req.user.role === 'admin' || req.user.role === 'moderator') {
            return res.send({ moderator: true });
          } else {
            return res.send(404, { error: 'no voting' });
          }
        } else {
          voting = JSON.parse(votingJSON);
          console.log('req.user._id', req.user._id);
          return vp.get('vp:voting:' + req.query.streamId + ':' + req.user._id, function (userVoteError, userVoteResponse) {
            console.log('userVoteResponce', userVoteError, userVoteResponse);
            if (userVoteResponse || req.query.type === 'results') {
              return vp.hgetall('vp:voting:' + req.query.streamId + ':results', function (err, results) {
                var count, index;
                console.log(err, results);
                if (!err) {
                  for (index in results) {
                    count = results[index];
                    voting.variants[index].count = parseInt(count);
                  }
                  voting.voted = true;
                  if (req.user.role === 'admin' || req.user.role === 'moderator')
                    voting.moderator = true;
                  return res.send(voting);
                } else {
                  return res.send(401, { error: err });
                }
              });
            } else {
              return res.send(voting);
            }
          });
        }
      });
  });
  app.post('/vote.php', function (req, res) {
    console.log('req.body', req.body);
    if ((null != req.body ? req.body.type : void 0) === 'variants') {
      if (!req.body.variants)
        return res.send(400, { error: 'variants required' });
      if (!req.body.streamId)
        return res.send(400, { error: 'streamId required' });
      return vp.setnx('vp:voting:' + req.body.streamId, JSON.stringify(req.body), function (err, createResponse) {
        var data;
        if (createResponse === 0)
          return res.send(405, { error: 'created' });
        if (!err) {
          data = req.body;
          if (req.user.role === 'admin' || req.user.role === 'moderator')
            data.moderator = true;
          return res.send(req.body);
        } else {
          return res.send(401, { error: err });
        }
      });
    } else if ((null != req.body ? req.body.type : void 0) === 'variant') {
      return vp.setnx('vp:voting:' + req.body.streamId + ':' + req.user._id, JSON.stringify(req.body), function (voteError, voteResponse) {
        console.log('voteResponse', voteError, voteResponse);
        if (voteResponse === 0)
          return res.send(405, { error: 'voted' });
        if (!voteError) {
          return vp.hincrby('vp:voting:' + req.body.streamId + ':results', req.body.id, 1, function (incrementError) {
            if (!incrementError) {
              return getAllVotesForStreamId(req.body.streamId, function (data) {
                if (req.user.role === 'admin' || req.user.role === 'moderator')
                  data.moderator = true;
                data.voted = true;
                return res.send(data);
              });
            } else {
              return res.send(400, { error: incrementError });
            }
          });
        } else {
          return res.send(400, { error: voteError });
        }
      });
    } else {
      return res.send(400, { error: 'noo' });
    }
  });
  app['delete']('/vote.php', function (req, res) {
    console.log(req.body);
    return vp.keys('vp:voting:' + req.body.streamId + '*', function (err, keys) {
      console.log(keys.join(' '));
      return vp.del(keys, function (err) {
        var data;
        if (!err) {
          data = { result: 'ok' };
          if (req.user.role === 'admin' || req.user.role === 'moderator')
            data.moderator = true;
          return res.send(data);
        } else {
          return res.send(500, { error: error });
        }
      });
    });
  });
  app.get('*', function (req, res) {
    res.status(404);
    return res.render('404.ect');
  });
  grid.init = function (cb) {
    grid.server = http.createServer(app);
    conf.server = grid.server;
    return grid.server.listen(app.get('port'), function () {
      if (!(app.settings.env === 'test'))
        console.log('Express HTTP server listening on port ' + app.get('port'));
      return grid.mongoose = mongoose.connect(conf.mongo, {}, function (err, db) {
        if (!err) {
          if (!(app.settings.env === 'test')) {
            console.log('DB connection initialized.');
          }
        } else {
          throw 'Cannot connect to DB (' + err + ').';
        }
        if (cb)
          return cb();
      });
    });
  };
  grid.teardown = function (cb) {
    return grid.mongoose.disconnect(function () {
      return grid.server.close(function () {
        if (cb)
          return cb();
      });
    });
  };
  function in$(member, list) {
    for (var i = 0, length = list.length; i < length; ++i)
      if (i in list && list[i] === member)
        return true;
    return false;
  }
}.call(this);
